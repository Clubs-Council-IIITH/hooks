#!/usr/bin/env bash

# config
BRANCHES=("prod" "staging")
PROJECT_PREFIX="cc-"
WORK_TREE_DIR="/home/git/worktrees"

while read oldrev newrev ref; do
  branch=`echo $ref | rev | cut -d / -f 1 | rev`
  if [[ " ${BRANCHES[*]} " =~ " $branch " ]]; then
    echo "Ref $ref received. Deploying [$branch]..."

    # set env vars for git
    export GIT_DIR=`pwd`
    export GIT_WORK_TREE="$WORK_TREE_DIR/services"

    # check out to worktree
    mkdir -p $GIT_WORK_TREE
    git checkout -f $branch
    cd $GIT_WORK_TREE

    # update status
    echo "Updating deployment status..."
    echo `jq \
      --arg commit "$(git rev-parse HEAD | head -c 7)" \
      --arg timestamp "$(date --iso-8601=ns | cut -d, -f 1)" \
      --arg environment "$branch" \
      '.commit = $commit | .timestamp = $timestamp | .environment = $environment' \
      nginx/static/json/status.json` > nginx/static/json/status.json

    # configure local submodule repos
    sed -i "s|git@github.com:Clubs-Council-IIITH|$HOME|g" .gitmodules
    git submodule add -b origin/$branch $HOME/services.git
    rm services/.gitmodules

    # pull submodules (except auth-dev)
    git -c submodule.apis/auth-dev.update=none submodule update --init

    # update changelog
    echo "Updating changelog..."
    git submodule foreach \
      'git log --no-merges --oneline --date=short --pretty=format:"**%ad:** [$name] %s  " | 
      grep -v -e "Apply Linting & Formatting Fixes" -e "Apply Prettier Formatting Fixes" | 
      cat && echo' \
      | grep -v ^Entering | sort -r -o nginx/static/mdx/logs.mdx

    # deploy new images
    docker compose -f docker-compose.$branch.yml -p $PROJECT_PREFIX$branch up --build -d

    # verify build status
    if [ $? -ne 0 ]; then
      echo "Build failed! Aborting."
      exit 1
    fi

    # clean up worktree
    rm -rf ./services
    git checkout -f $branch

    echo "Deployed [$branch] successfully!"
  else
    echo "Ref $ref received. Doing nothing: only [${BRANCHES[*]}] may be deployed on this server."
  fi
done

