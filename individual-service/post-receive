#!/usr/bin/env bash

# config
BRANCH="master"
IMAGE_PREFIX="cc-"
WORK_TREE_DIR="/home/git/worktrees"

while read oldrev newrev ref; do
  if [ "$ref" = "refs/heads/$BRANCH" ]; then
    echo "Ref $ref received. Building image from [$BRANCH]..."

    # generate image name using current repo name
    repo_name=`basename $(pwd) | tr \'[:upper:]\' \'[:lower:]\' | sed 's/.git$//'`
    image_name="$IMAGE_PREFIX$repo_name"

    # get last commit hash to use as tag
    last_commit=`git log --pretty=format:'%h' -n 1`

    # check out to worktree
    mkdir -p "$WORK_TREE_DIR/$image_name"
    GIT_WORK_TREE="$WORK_TREE_DIR/$image_name" git checkout -f $BRANCH
    cd "$WORK_TREE_DIR/$image_name"

    if [ -f $CC_CONFIG_PATH/prod/global ]; then
        echo "Loading global environment file..."
        cp $CC_CONFIG_PATH/prod/global .env
    else
        echo "Environment file $CC_CONFIG_PATH/prod/global not found. Skipping..."
    fi

    # Now load env file of the same name as image
    if [ -f $CC_CONFIG_PATH/prod/$repo_name ]; then
        echo "Loading $repo_name environment file..."
        cp $CC_CONFIG_PATH/prod/$repo_name .env.local
    else
        echo "Environment file $CC_CONFIG_PATH/prod/$repo_name not found. Skipping..."
    fi

    # build image
    docker build -t $image_name .

    # add commit tag to image
    docker tag $image_name:latest $image_name:$last_commit

    # verify build status
    if [ $? -ne 0 ]; then
      echo "Build failed! Aborting."
      exit 1
    fi

    echo "Built image $image_name:$last_commit from [$BRANCH] successfully!"
  else
    echo "Ref $ref received. Doing nothing: only [$BRANCH] may be deployed on this server."
  fi
done

